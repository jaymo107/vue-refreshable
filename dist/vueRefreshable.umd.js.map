{"version":3,"file":"vueRefreshable.umd.js","sources":["../src/storage/store.js","../src/refreshable.js","../src/filters/passwordFilter.js","../src/main.js"],"sourcesContent":["const DEFAULT_STORAGE_KEY = 'vue-refreshable-state';\n\nexport default class Store {\n  /**\n   * @constructor\n   * @param {Object} options\n   * @param {Object} options.storage    Storage mechanism.\n   * @param {Object} options.key        Custom storage key.\n   */\n  constructor(options = {}) {\n    this.storage = options.storage || localStorage;\n    this.key = options.key || DEFAULT_STORAGE_KEY;\n  }\n\n  /**\n   * @param {Object} state    The current form state.\n   */\n  set(state) {\n    this.storage.setItem(this.key, JSON.stringify(state));\n  }\n\n  /**\n   * @return {Object}     The parsed state from storage.\n   */\n  get() {\n    let stored = this.storage.getItem(this.key);\n\n    if (stored) {\n      try {\n        stored = JSON.parse(stored);\n      } catch (e) {\n        //\n      }\n    }\n\n    return stored || {};\n  }\n\n  /**\n   * Delete the key when we unbind the component.\n   */\n  clear() {\n    this.storage.removeItem(this.key);\n  }\n}\n","import Storage from './storage/store';\nimport passwordFilter from './filters/passwordFilter';\n\nexport default class Refreshable {\n  /**\n   * @constructor\n   * @param {Object} options\n   * @param {String} options.key      A custom localStorage key.\n   * @param {Object} options.storage  Storage mechanism.\n   */\n  constructor(options = {}) {\n    this.storage = new Storage({\n      storage: options.storage,\n      key: options.key,\n    });\n  }\n\n  /**\n   * When the component is first bound, set the data.\n   *\n   * @param {HTMLElement} el          DOM Element.\n   * @param {Object} param1           Binding object.\n   * @param {String} param1.arg       The key to restore data from\n   * @param {Object} param2           VNode.\n   * @param {Object} param2.context   Vue Instance.\n   */\n  bind(el, { arg }, { context }) {\n    const storedState = this.storage.get();\n\n    Object.keys(storedState).forEach((key) => {\n      context[arg][key] = storedState[key];\n    });\n  }\n\n  /**\n   * Clear storage when the component is unmounted.\n   */\n  unbind() {\n    this.storage.clear();\n  }\n\n  /**\n   * Every time the data updates, persist to the storage.\n   *\n   * @param {HTMLFormElement} el          DOM Element.\n   * @param {Object} param1           Binding object.\n   * @param {String} param1.arg       The key to restore data from\n   * @param {Object} param2           VNode.\n   * @param {Object} param2.context   Vue Instance.\n   */\n  update(el, { arg }, { context }) {\n    const state = passwordFilter(context[arg], el);\n    this.storage.set(state);\n  }\n}\n","const TYPE_PASSWORD = 'password';\n\n/**\n * Get password values, find the associated keys and omit them from\n * being stored in the state.\n *\n * @param {Object} currentState               The current state.\n * @param {Object} param1                     Element the directive is bound to.\n * @param {HTMLCollection} param1.elements    Children of the parent element.\n * @return {Object}\n */\nexport default (currentState, { elements }) => {\n  const state = { ...currentState };\n  const passwords = [];\n\n  for (const element of elements) {\n    if (element.type === TYPE_PASSWORD) {\n      passwords.push(element.value);\n    }\n  }\n\n  Object.keys(state).forEach((key) => {\n    if (passwords.includes(state[key])) {\n      delete state[key];\n    }\n  });\n\n  return state;\n};\n","import Refreshable from './refreshable';\n\nconst DIRECTIVE_NAME = 'refreshable';\n\nexport default {\n\n  /**\n   * @param {Object} Vue\n   * @param {Object} options\n   * @param {String} options.key      A custom localStorage key.\n   * @param {Object} options.storage  Storage mechanism.\n   */\n  install(Vue, options = {}) {\n    const refreshable = new Refreshable(options);\n    Vue.directive(DIRECTIVE_NAME, refreshable.bind(refreshable));\n  },\n};\n"],"names":["Store","constructor","options","this","storage","localStorage","key","set","state","setItem","JSON","stringify","get","stored","getItem","parse","e","clear","removeItem","Refreshable","Storage","bind","el","arg","context","storedState","Object","keys","forEach","unbind","update","currentState","elements","passwords","element","type","push","value","includes","passwordFilter","install","Vue","refreshable","directive"],"mappings":"sPAEe,MAAMA,EAOnBC,YAAYC,EAAU,IACpBC,KAAKC,QAAUF,EAAQE,SAAWC,aAClCF,KAAKG,IAAMJ,EAAQI,KAXK,wBAiB1BC,IAAIC,GACFL,KAAKC,QAAQK,QAAQN,KAAKG,IAAKI,KAAKC,UAAUH,IAMhDI,MACE,IAAIC,EAASV,KAAKC,QAAQU,QAAQX,KAAKG,KAEvC,GAAIO,EACF,IACEA,EAASH,KAAKK,MAAMF,GACpB,MAAOG,IAKX,OAAOH,GAAU,GAMnBI,QACEd,KAAKC,QAAQc,WAAWf,KAAKG,MCvClB,MAAMa,EAOnBlB,YAAYC,EAAU,IACpBC,KAAKC,QAAU,IAAIgB,EAAQ,CACzBhB,QAASF,EAAQE,QACjBE,IAAKJ,EAAQI,MAajBe,KAAKC,GAAIC,IAAEA,IAAOC,QAAEA,IAClB,MAAMC,EAActB,KAAKC,QAAQQ,MAEjCc,OAAOC,KAAKF,GAAaG,SAAStB,IAChCkB,EAAQD,GAAKjB,GAAOmB,EAAYnB,MAOpCuB,SACE1B,KAAKC,QAAQa,QAYfa,OAAOR,GAAIC,IAAEA,IAAOC,QAAEA,IACpB,MAAMhB,ECxCK,EAACuB,GAAgBC,SAAAA,MAC9B,MAAMxB,EAAQ,IAAKuB,GACbE,EAAY,GAElB,IAAK,MAAMC,KAAWF,EAfF,aAgBdE,EAAQC,MACVF,EAAUG,KAAKF,EAAQG,OAU3B,OANAX,OAAOC,KAAKnB,GAAOoB,SAAStB,IACtB2B,EAAUK,SAAS9B,EAAMF,YACpBE,EAAMF,MAIVE,GDwBS+B,CAAef,EAAQD,GAAMD,GAC3CnB,KAAKC,QAAQG,IAAIC,UEhDN,CAQbgC,QAAQC,EAAKvC,EAAU,IACrB,MAAMwC,EAAc,IAAIvB,EAAYjB,GACpCuC,EAAIE,UAZe,cAYWD,EAAYrB,KAAKqB"}